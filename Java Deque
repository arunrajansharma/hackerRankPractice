    
In computer science, a double-ended queue (dequeue, often abbreviated to deque, pronounced deck) is an abstract data type that generalizes a queue, for which elements can be added to or removed from either the front (head) or back (tail).

Deque interfaces can be implemented using various types of collections such as LinkedList or ArrayDeque classes. For example, deque can be declared as:

Deque deque = new LinkedList<>();
or
Deque deque = new ArrayDeque<>();
You can find more details about Deque here.

In this problem, you are given NN integers. You need to find the maximum number of unique integers among all the possible contiguous subarrays of size MM.

Note: Time limit is 33 second for this problem.

Input Format

The first line of input contains two integers NN and MM: representing the total number of integers and the size of the subarray, respectively. The next line contains NN space separated integers.

Constraints

1≤N≤1000001≤N≤100000
1≤M≤1000001≤M≤100000
M≤NM≤N
The numbers in the array will range between [0,10000000][0,10000000].

Output Format

Print the maximum number of unique integers among all possible contiguous subarrays of size MM.









*********************************************************** Sometimes, I feel Coding is better than sex *******************************


    import java.util.*;
    public class test {
        public static void main(String[] args) {
            Scanner in = new Scanner(System.in);
           
            int n = in.nextInt();
            int m = in.nextInt();

            Deque<Integer> q = new ArrayDeque<Integer>();
            
            Set<Integer> hs = new HashSet<Integer>() ;
            
            int gMax = -1;
            int lMax = -1;
            
            for (int i = 0; i < n; i++) {
                int num = in.nextInt();
                
                if(q.size()<m){  // adding ONLY 
                    q.addLast(num); 
                    hs.add(num);
                   
                    lMax = hs.size() ;
                    
                   if(lMax>gMax){
                     gMax = lMax ;
                   }
                  
                    
                }
                
                else{
                    q.addLast(num);
                    hs.add(num);
                    
                    int removed  = q.removeFirst();
                    if(!q.contains(removed)){
                        hs.remove(removed);
                    }
                    
                    lMax = hs.size() ;
                    
                   if(lMax>gMax){
                     gMax = lMax ;
                   }
                    
                    
                }
                
               // hs.addAll(q); //adding all the elements of the queue to a set
                
              
                
                
              }
            
            System.out.println(gMax);
            
        }
    }
