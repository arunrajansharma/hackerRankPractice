You are given a list of student information: ID, FirstName, and CGPA. Your task is to rearrange them according to their CGPA in decreasing order. If two student have the same CGPA, then arrange them according to their first name in alphabetical order. If those two students also have the same first name, then order them according to their ID. No two students have the same ID.

Hint: You can use comparators to sort a list of objects. See the oracle docs to learn about comparators.

Input Format

The first line of input contains an integer NN, representing the total number of students. The next NN lines contains a list of student information in the following structure:

ID Name CGPA
Constraints

2≤N≤10002≤N≤1000
0≤ID≤1000000≤ID≤100000
5≤|Name|≤305≤|Name|≤30
0≤CGPA≤4.000≤CGPA≤4.00

The name contains only lowercase English letters. The IDID contains only integer numbers without leading zeros. The CGPA will contain, at most, 2 digits after the decimal point.

Output Format

After rearranging the students according to the above rules, print the first name of each student on a separate line.











************************************************* Try it Yourself First **************








import java.util.*;

class Student{
   private int id;
   private String fname;
   private double cgpa;
   public Student(int id, String fname, double cgpa) {
      super();
      this.id = id;
      this.fname = fname;
      this.cgpa = cgpa;
   }
   public int getId() {
      return id;
   }
   public String getFname() {
      return fname;
   }
   public double getCgpa() {
      return cgpa;
   }
}

 class MyComparator implements Comparator<Student>{
    @Override
    public int compare(Student a, Student b){
        if((a.getCgpa()) < (b.getCgpa())){ // Decreasing CGPA
            return 1;
        }
        else if ((a.getCgpa()) > (b.getCgpa())){
            return -1;
        }
        
        else { // When CGPAs are equal, compare Name 
            
            String aName = a.getFname();
            String bName = b.getFname();
            
             if( aName.compareTo(bName) == 0){
                 return (a.getId() - b.getId()); // when names are equal too, one with less ID gets preference
             }
            else if (aName.compareTo(bName) < 0)  // i want abc before cde.
                return -1;
                
                else return 1;
            
        }
    }
}

//Complete the code
public class Solution
{
   public static void main(String[] args){
      Scanner in = new Scanner(System.in);
      int testCases = Integer.parseInt(in.nextLine());
      
      List<Student> studentList = new ArrayList<Student>();
      while(testCases>0){
         int id = in.nextInt();
         String fname = in.next();
         double cgpa = in.nextDouble();
         
         Student st = new Student(id, fname, cgpa);
         studentList.add(st);
         
         testCases--;
      }
       
       Collections.sort(studentList, new MyComparator()) ;
       
       
       
       
      
         for(Student st: studentList){
         System.out.println(st.getFname());
      }
   }
}
