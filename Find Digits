

Given an integer, NN, traverse its digits (dd1,dd2,...,ddn) and determine how many digits evenly divide NN (i.e.: count the number of times NN divided by each digit ddi has a remainder of 00). Print the number of evenly divisible digits.

Note: Each digit is considered to be unique, so each occurrence of the same evenly divisible digit should be counted (i.e.: for N=111N=111, the answer is 33).

Input Format

The first line is an integer, TT, indicating the number of test cases. 
The TT subsequent lines each contain an integer, NN.

Constraints 
1≤T≤151≤T≤15 
0<N<1090<N<109
Output Format

For every test case, count and print (on a new line) the number of digits in NN that are able to evenly divide NN.











***************************************** I am in love with Java ******************************


import java.io.*;
import java.util.*;
import java.text.*;
import java.math.*;
import java.util.regex.*;

public class Solution {

    public static void main(String[] args) {
        Scanner in = new Scanner(System.in);
        int t = in.nextInt();
        int count =0;
        for(int a0 = 0; a0 < t; a0++){
            int n = in.nextInt();
            count = 0; 
            String num = String.valueOf(n);
            for(int i=0;i<num.length();i++){
                int test = Character.getNumericValue(num.charAt(i));
                if(test !=0 && n%test ==0 ){
                    count++;
                }
            }
            System.out.println(count);
            
        }// for loop ends here
        
    } //main ends here
}
